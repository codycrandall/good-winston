var GoodReporter, GoodWinston, Hoek, SafeStringify, exports, internals;

GoodReporter = require('good-reporter');

Hoek = require('hoek');

SafeStringify = require('json-stringify-safe');

internals = {
  defaults: {
    level: 'info'
  }
};

GoodWinston = (function() {
  function GoodWinston(events, winston, options) {
    var settings;
    if (options == null) {
      options = {};
    }
    Hoek.assert(this.constructor === GoodWinston, 'GoodWinston must be created with new');
    Hoek.assert(winston, 'winston logger must not be null');
    settings = Hoek.applyToDefaults(internals.defaults, options);
    this.winston = winston;
    this.level = settings.level;
    GoodReporter.call(this, events, settings);
  }

  return GoodWinston;

})();

Hoek.inherits(GoodWinston, GoodReporter);

GoodWinston.prototype._logResponse = function(event, tags) {
  var query, responsePayload;
  if (tags == null) {
    tags = [];
  }
  query = event.query ? JSON.stringify(event.query) : '';
  responsePayload = '';
  if (typeof event.responsePayload === 'object' && event.responsePayload) {
    responsePayload = 'response payload: ' + SafeStringify(event.responsePayload);
  }
  return this.winston[this.level](("[" + tags + "], ") + Hoek.format('%s: %s %s %s %s (%sms) %s', event.instance, event.method, event.path, query, event.statusCode, event.responseTime, responsePayload));
};

GoodWinston.prototype._report = function(event, data) {
  if (event === 'response') {
    return this._logResponse(data, data.tags);
  } else if (event === 'ops') {
    return this.winston[this.level](Hoek.format('memory: %sMb, uptime (seconds): %s, load: %s', Math.round(data.proc.mem.rss / (1024 * 1024)), data.proc.uptime, data.os.load));
  } else if (event === 'error') {
    return this.winston[this.level]('message: ' + data.error.message + ' stack: ' + data.error.stack);
  } else if (event === 'request' || event === 'log') {
    return this.winston[this.level]('data: ' + (typeof data.data === 'object' ? SafeStringify(data.data) : data.data));
  } else if (data.data) {
    return this.winston[this.level]('data: ' + (typeof data.data === 'object' ? SafeStringify(data.data) : data.data));
  } else {
    return this.winston[this.level]('data: (none)');
  }
};

GoodWinston.prototype.start = function(emitter, callback) {
  emitter.on('report', this._handleEvent.bind(this));
  return callback(null);
};

GoodWinston.prototype.stop = function() {};

module.exports = exports = GoodWinston;

//# sourceMappingURL=data:application/json;base64,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LFFBQVgsRUFBcUIsSUFBQyxDQUFBLFlBQVksQ0FBQyxJQUFkLENBQW1CLElBQW5CLENBQXJCLENBQUEsQ0FBQTtTQUNBLFFBQUEsQ0FBUyxJQUFULEVBRm1CO0FBQUEsQ0FuRHJCLENBQUE7O0FBQUEsV0F1RFcsQ0FBQSxTQUFFLENBQUEsSUFBYixHQUFvQixTQUFBLEdBQUEsQ0F2RHBCLENBQUE7O0FBQUEsTUEwRE0sQ0FBQyxPQUFQLEdBQWlCLE9BQUEsR0FBVSxXQTFEM0IsQ0FBQSIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIkdvb2RSZXBvcnRlciA9IHJlcXVpcmUgJ2dvb2QtcmVwb3J0ZXInXG5Ib2VrID0gcmVxdWlyZSAnaG9laydcblNhZmVTdHJpbmdpZnkgPSByZXF1aXJlICdqc29uLXN0cmluZ2lmeS1zYWZlJ1xuXG5pbnRlcm5hbHMgPVxuICBkZWZhdWx0czpcbiAgICBsZXZlbDogJ2luZm8nXG5cbmNsYXNzIEdvb2RXaW5zdG9uXG4gIGNvbnN0cnVjdG9yOiAoZXZlbnRzLCB3aW5zdG9uLCBvcHRpb25zID0ge30pIC0+XG4gICAgSG9lay5hc3NlcnQgQGNvbnN0cnVjdG9yID09IEdvb2RXaW5zdG9uLCAnR29vZFdpbnN0b24gbXVzdCBiZSBjcmVhdGVkIHdpdGggbmV3J1xuICAgIEhvZWsuYXNzZXJ0IHdpbnN0b24sICd3aW5zdG9uIGxvZ2dlciBtdXN0IG5vdCBiZSBudWxsJ1xuICAgIHNldHRpbmdzID0gSG9lay5hcHBseVRvRGVmYXVsdHMgaW50ZXJuYWxzLmRlZmF1bHRzLCBvcHRpb25zXG4gICAgQHdpbnN0b24gPSB3aW5zdG9uXG4gICAgQGxldmVsID0gc2V0dGluZ3MubGV2ZWxcbiAgICBHb29kUmVwb3J0ZXIuY2FsbCB0aGlzLCBldmVudHMsIHNldHRpbmdzXG5cbkhvZWsuaW5oZXJpdHMgR29vZFdpbnN0b24sIEdvb2RSZXBvcnRlclxuXG5Hb29kV2luc3Rvbjo6X2xvZ1Jlc3BvbnNlID0gKGV2ZW50LCB0YWdzPVtdKSAtPlxuICBxdWVyeSA9IGlmIGV2ZW50LnF1ZXJ5IHRoZW4gSlNPTi5zdHJpbmdpZnkoZXZlbnQucXVlcnkpIGVsc2UgJydcbiAgcmVzcG9uc2VQYXlsb2FkID0gJydcbiAgaWYgdHlwZW9mIGV2ZW50LnJlc3BvbnNlUGF5bG9hZCA9PSAnb2JqZWN0JyBhbmQgZXZlbnQucmVzcG9uc2VQYXlsb2FkXG4gICAgcmVzcG9uc2VQYXlsb2FkID0gJ3Jlc3BvbnNlIHBheWxvYWQ6ICcgKyBTYWZlU3RyaW5naWZ5IGV2ZW50LnJlc3BvbnNlUGF5bG9hZFxuICBAd2luc3RvbltAbGV2ZWxdIFwiWyN7dGFnc31dLCBcIiArIEhvZWsuZm9ybWF0ICclczogJXMgJXMgJXMgJXMgKCVzbXMpICVzJyxcbiAgICBldmVudC5pbnN0YW5jZSxcbiAgICBldmVudC5tZXRob2QsXG4gICAgZXZlbnQucGF0aCxcbiAgICBxdWVyeSxcbiAgICBldmVudC5zdGF0dXNDb2RlLFxuICAgIGV2ZW50LnJlc3BvbnNlVGltZSxcbiAgICByZXNwb25zZVBheWxvYWRcblxuR29vZFdpbnN0b246Ol9yZXBvcnQgPSAoZXZlbnQsIGRhdGEpIC0+XG4gIGlmIGV2ZW50ID09ICdyZXNwb25zZSdcbiAgICBAX2xvZ1Jlc3BvbnNlIGRhdGEsIGRhdGEudGFnc1xuICBlbHNlIGlmIGV2ZW50ID09ICdvcHMnXG4gICAgQHdpbnN0b25bQGxldmVsXSBIb2VrLmZvcm1hdCAnbWVtb3J5OiAlc01iLCB1cHRpbWUgKHNlY29uZHMpOiAlcywgbG9hZDogJXMnLFxuICAgICAgTWF0aC5yb3VuZChkYXRhLnByb2MubWVtLnJzcyAvICgxMDI0ICogMTAyNCkpLFxuICAgICAgZGF0YS5wcm9jLnVwdGltZSxcbiAgICAgIGRhdGEub3MubG9hZFxuICBlbHNlIGlmIGV2ZW50ID09ICdlcnJvcidcbiAgICBAd2luc3RvbltAbGV2ZWxdICdtZXNzYWdlOiAnICsgZGF0YS5lcnJvci5tZXNzYWdlICsgJyBzdGFjazogJyArIGRhdGEuZXJyb3Iuc3RhY2tcbiAgZWxzZSBpZiBldmVudCA9PSAncmVxdWVzdCcgb3IgZXZlbnQgPT0gJ2xvZydcbiAgICBAd2luc3RvbltAbGV2ZWxdICdkYXRhOiAnICsgaWYgdHlwZW9mIGRhdGEuZGF0YSA9PSAnb2JqZWN0JyB0aGVuIFNhZmVTdHJpbmdpZnkoZGF0YS5kYXRhKSBlbHNlIGRhdGEuZGF0YVxuICAjIEV2ZW50IHRoYXQgaXMgdW5rbm93biB0byBnb29kLWNvbnNvbGUsIHRyeSBhIGRlZnVhbHQuXG4gIGVsc2UgaWYgZGF0YS5kYXRhXG4gICAgQHdpbnN0b25bQGxldmVsXSAnZGF0YTogJyArIGlmIHR5cGVvZiBkYXRhLmRhdGEgPT0gJ29iamVjdCcgdGhlbiBTYWZlU3RyaW5naWZ5KGRhdGEuZGF0YSkgZWxzZSBkYXRhLmRhdGFcbiAgZWxzZVxuICAgIEB3aW5zdG9uW0BsZXZlbF0gJ2RhdGE6IChub25lKSdcblxuR29vZFdpbnN0b246OnN0YXJ0ID0gKGVtaXR0ZXIsIGNhbGxiYWNrKSAtPlxuICBlbWl0dGVyLm9uICdyZXBvcnQnLCBAX2hhbmRsZUV2ZW50LmJpbmQodGhpcylcbiAgY2FsbGJhY2sgbnVsbFxuXG5Hb29kV2luc3Rvbjo6c3RvcCA9IC0+XG4gIHJldHVyblxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBHb29kV2luc3RvblxuIl19