var GoodReporter, GoodWinston, Hoek, internals;

GoodReporter = require('good-reporter');

Hoek = require('hoek');

internals = {
  defaults: {
    level: 'info'
  }
};

GoodWinston = (function() {
  function GoodWinston(events, winston, options) {
    var settings;
    if (options == null) {
      options = {};
    }
    console.log("events=", events);
    console.log("winston=", winston != null);
    Hoek.assert(this.constructor === GoodWinston, 'GoodWinston must be created with new');
    Hoek.assert(winston, 'winston logger must not be null');
    settings = Hoek.applyToDefaults(internals.defaults, options);
    console.log("settings=", settings);
    this.winston = winston;
    this.level = settings.level;
    GoodReporter.call(this, events, settings);
  }

  return GoodWinston;

})();

Hoek.inherits(GoodWinston, GoodReporter);

GoodWinston.prototype._report = function(event, eventData) {
  console.log("_report()");
  console.dir(event);
  if (event === 'ops') {
    return this.winston[this.level](Hoek.format('memory: %sMb, uptime (seconds): %s, load: %s', Math.round(eventData.proc.mem.rss / (1024 * 1024)), eventData.proc.uptime, eventData.os.load));
  }
};

GoodWinston.prototype.start = function(emitter, callback) {
  emitter.on('report', this._handleEvent.bind(this));
  return callback(null);
};

GoodWinston.prototype.stop = function() {};

module.exports = GoodWinston;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBLDBDQUFBOztBQUFBLFlBQUEsR0FBZSxPQUFBLENBQVEsZUFBUixDQUFmLENBQUE7O0FBQUEsSUFDQSxHQUFPLE9BQUEsQ0FBUSxNQUFSLENBRFAsQ0FBQTs7QUFBQSxTQUdBLEdBQ0U7QUFBQSxFQUFBLFFBQUEsRUFDRTtBQUFBLElBQUEsS0FBQSxFQUFPLE1BQVA7R0FERjtDQUpGLENBQUE7O0FBQUE7QUFRZSxFQUFBLHFCQUFDLE1BQUQsRUFBUyxPQUFULEVBQWtCLE9BQWxCLEdBQUE7QUFDWCxRQUFBLFFBQUE7O01BRDZCLFVBQVU7S0FDdkM7QUFBQSxJQUFBLE9BQU8sQ0FBQyxHQUFSLENBQVksU0FBWixFQUF1QixNQUF2QixDQUFBLENBQUE7QUFBQSxJQUNBLE9BQU8sQ0FBQyxHQUFSLENBQVksVUFBWixFQUF3QixlQUF4QixDQURBLENBQUE7QUFBQSxJQUVBLElBQUksQ0FBQyxNQUFMLENBQVksSUFBQyxDQUFBLFdBQUQsS0FBZ0IsV0FBNUIsRUFBeUMsc0NBQXpDLENBRkEsQ0FBQTtBQUFBLElBR0EsSUFBSSxDQUFDLE1BQUwsQ0FBWSxPQUFaLEVBQXFCLGlDQUFyQixDQUhBLENBQUE7QUFBQSxJQUlBLFFBQUEsR0FBVyxJQUFJLENBQUMsZUFBTCxDQUFxQixTQUFTLENBQUMsUUFBL0IsRUFBeUMsT0FBekMsQ0FKWCxDQUFBO0FBQUEsSUFLQSxPQUFPLENBQUMsR0FBUixDQUFZLFdBQVosRUFBeUIsUUFBekIsQ0FMQSxDQUFBO0FBQUEsSUFNQSxJQUFDLENBQUEsT0FBRCxHQUFXLE9BTlgsQ0FBQTtBQUFBLElBT0EsSUFBQyxDQUFBLEtBQUQsR0FBUyxRQUFRLENBQUMsS0FQbEIsQ0FBQTtBQUFBLElBUUEsWUFBWSxDQUFDLElBQWIsQ0FBa0IsSUFBbEIsRUFBd0IsTUFBeEIsRUFBZ0MsUUFBaEMsQ0FSQSxDQURXO0VBQUEsQ0FBYjs7cUJBQUE7O0lBUkYsQ0FBQTs7QUFBQSxJQW1CSSxDQUFDLFFBQUwsQ0FBYyxXQUFkLEVBQTJCLFlBQTNCLENBbkJBLENBQUE7O0FBQUEsV0FxQlcsQ0FBQSxTQUFFLENBQUEsT0FBYixHQUF1QixTQUFDLEtBQUQsRUFBUSxTQUFSLEdBQUE7QUFDckIsRUFBQSxPQUFPLENBQUMsR0FBUixDQUFZLFdBQVosQ0FBQSxDQUFBO0FBQUEsRUFDQSxPQUFPLENBQUMsR0FBUixDQUFZLEtBQVosQ0FEQSxDQUFBO0FBRUEsRUFBQSxJQUFHLEtBQUEsS0FBUyxLQUFaO1dBQ0UsSUFBQyxDQUFBLE9BQVEsQ0FBQSxJQUFDLENBQUEsS0FBRCxDQUFULENBQWlCLElBQUksQ0FBQyxNQUFMLENBQVksOENBQVosRUFDZixJQUFJLENBQUMsS0FBTCxDQUFXLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQW5CLEdBQXlCLENBQUMsSUFBQSxHQUFPLElBQVIsQ0FBcEMsQ0FEZSxFQUVmLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFGQSxFQUdmLFNBQVMsQ0FBQyxFQUFFLENBQUMsSUFIRSxDQUFqQixFQURGO0dBSHFCO0FBQUEsQ0FyQnZCLENBQUE7O0FBQUEsV0E4QlcsQ0FBQSxTQUFFLENBQUEsS0FBYixHQUFxQixTQUFDLE9BQUQsRUFBVSxRQUFWLEdBQUE7QUFDbkIsRUFBQSxPQUFPLENBQUMsRUFBUixDQUFXLFFBQVgsRUFBcUIsSUFBQyxDQUFBLFlBQVksQ0FBQyxJQUFkLENBQW1CLElBQW5CLENBQXJCLENBQUEsQ0FBQTtTQUNBLFFBQUEsQ0FBUyxJQUFULEVBRm1CO0FBQUEsQ0E5QnJCLENBQUE7O0FBQUEsV0FrQ1csQ0FBQSxTQUFFLENBQUEsSUFBYixHQUFvQixTQUFBLEdBQUEsQ0FsQ3BCLENBQUE7O0FBQUEsTUFxQ00sQ0FBQyxPQUFQLEdBQWlCLFdBckNqQixDQUFBIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiR29vZFJlcG9ydGVyID0gcmVxdWlyZSAnZ29vZC1yZXBvcnRlcidcbkhvZWsgPSByZXF1aXJlICdob2VrJ1xuXG5pbnRlcm5hbHMgPVxuICBkZWZhdWx0czpcbiAgICBsZXZlbDogJ2luZm8nXG5cbmNsYXNzIEdvb2RXaW5zdG9uXG4gIGNvbnN0cnVjdG9yOiAoZXZlbnRzLCB3aW5zdG9uLCBvcHRpb25zID0ge30pIC0+XG4gICAgY29uc29sZS5sb2cgXCJldmVudHM9XCIsIGV2ZW50c1xuICAgIGNvbnNvbGUubG9nIFwid2luc3Rvbj1cIiwgd2luc3Rvbj9cbiAgICBIb2VrLmFzc2VydCBAY29uc3RydWN0b3IgPT0gR29vZFdpbnN0b24sICdHb29kV2luc3RvbiBtdXN0IGJlIGNyZWF0ZWQgd2l0aCBuZXcnXG4gICAgSG9lay5hc3NlcnQgd2luc3RvbiwgJ3dpbnN0b24gbG9nZ2VyIG11c3Qgbm90IGJlIG51bGwnXG4gICAgc2V0dGluZ3MgPSBIb2VrLmFwcGx5VG9EZWZhdWx0cyBpbnRlcm5hbHMuZGVmYXVsdHMsIG9wdGlvbnNcbiAgICBjb25zb2xlLmxvZyBcInNldHRpbmdzPVwiLCBzZXR0aW5nc1xuICAgIEB3aW5zdG9uID0gd2luc3RvblxuICAgIEBsZXZlbCA9IHNldHRpbmdzLmxldmVsXG4gICAgR29vZFJlcG9ydGVyLmNhbGwgdGhpcywgZXZlbnRzLCBzZXR0aW5nc1xuXG5Ib2VrLmluaGVyaXRzIEdvb2RXaW5zdG9uLCBHb29kUmVwb3J0ZXJcblxuR29vZFdpbnN0b246Ol9yZXBvcnQgPSAoZXZlbnQsIGV2ZW50RGF0YSkgLT5cbiAgY29uc29sZS5sb2cgXCJfcmVwb3J0KClcIlxuICBjb25zb2xlLmRpciBldmVudFxuICBpZiBldmVudCA9PSAnb3BzJ1xuICAgIEB3aW5zdG9uW0BsZXZlbF0gSG9lay5mb3JtYXQgJ21lbW9yeTogJXNNYiwgdXB0aW1lIChzZWNvbmRzKTogJXMsIGxvYWQ6ICVzJyxcbiAgICAgIE1hdGgucm91bmQoZXZlbnREYXRhLnByb2MubWVtLnJzcyAvICgxMDI0ICogMTAyNCkpLFxuICAgICAgZXZlbnREYXRhLnByb2MudXB0aW1lLFxuICAgICAgZXZlbnREYXRhLm9zLmxvYWRcblxuR29vZFdpbnN0b246OnN0YXJ0ID0gKGVtaXR0ZXIsIGNhbGxiYWNrKSAtPlxuICBlbWl0dGVyLm9uICdyZXBvcnQnLCBAX2hhbmRsZUV2ZW50LmJpbmQodGhpcylcbiAgY2FsbGJhY2sgbnVsbFxuXG5Hb29kV2luc3Rvbjo6c3RvcCA9IC0+XG4gIHJldHVyblxuXG5tb2R1bGUuZXhwb3J0cyA9IEdvb2RXaW5zdG9uXG4iXX0=