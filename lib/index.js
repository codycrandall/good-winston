var GoodReporter, GoodWinston, Hoek, SafeStringify, exports, internals;

GoodReporter = require('good-reporter');

Hoek = require('hoek');

SafeStringify = require('json-stringify-safe');

internals = {
  defaults: {
    error_level: 'error',
    ops_level: 'info',
    request_level: 'info',
    response_level: 'info',
    other_level: 'info'
  }
};

GoodWinston = (function() {
  function GoodWinston(events, winston, options) {
    var settings;
    if (options == null) {
      options = {};
    }
    Hoek.assert(this.constructor === GoodWinston, 'GoodWinston must be created with new');
    Hoek.assert(winston, 'winston logger must not be null');
    settings = Hoek.applyToDefaults(internals.defaults, options);
    this.winston = winston;
    this.error_level = settings.error_level;
    this.ops_level = settings.ops_level;
    this.request_level = settings.request_level;
    this.response_level = settings.response_level;
    this.other_level = settings.other_level;
    GoodReporter.call(this, events, settings);
  }

  return GoodWinston;

})();

Hoek.inherits(GoodWinston, GoodReporter);

GoodWinston.prototype._logResponse = function(event, tags) {
  var query, responsePayload;
  if (tags == null) {
    tags = [];
  }
  query = event.query ? JSON.stringify(event.query) : '';
  responsePayload = '';
  if (typeof event.responsePayload === 'object' && event.responsePayload) {
    responsePayload = 'response payload: ' + SafeStringify(event.responsePayload);
  }
  return this.winston[this.response_level](("[" + tags + "], ") + Hoek.format('%s: %s %s %s %s (%sms) %s', event.instance, event.method, event.path, query, event.statusCode, event.responseTime, responsePayload));
};

GoodWinston.prototype._report = function(event, data) {
  if (event === 'response') {
    return this._logResponse(data, data.tags);
  } else if (event === 'ops') {
    return this.winston[this.ops_level](Hoek.format('memory: %sMb, uptime (seconds): %s, load: %s', Math.round(data.proc.mem.rss / (1024 * 1024)), data.proc.uptime, data.os.load));
  } else if (event === 'error') {
    return this.winston[this.error_level]('message: ' + data.error.message + ' stack: ' + data.error.stack);
  } else if (event === 'request' || event === 'log') {
    return this.winston[this.request_level]('data: ' + (typeof data.data === 'object' ? SafeStringify(data.data) : data.data));
  } else if (data.data) {
    return this.winston[this.other_level]('data: ' + (typeof data.data === 'object' ? SafeStringify(data.data) : data.data));
  } else {
    return this.winston[this.other_level]('data: (none)');
  }
};

GoodWinston.prototype.start = function(emitter, callback) {
  emitter.on('report', this._handleEvent.bind(this));
  return callback(null);
};

GoodWinston.prototype.stop = function() {};

module.exports = exports = GoodWinston;

//# sourceMappingURL=data:application/json;base64,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LFFBQUEsR0FBVyxDQUFHLE1BQUEsQ0FBQSxJQUFXLENBQUMsSUFBWixLQUFvQixRQUF2QixHQUFxQyxhQUFBLENBQWMsSUFBSSxDQUFDLElBQW5CLENBQXJDLEdBQW1FLElBQUksQ0FBQyxJQUF4RSxDQUFsQyxFQURHO0dBQUEsTUFBQTtXQUdILElBQUMsQ0FBQSxPQUFRLENBQUEsSUFBQyxDQUFBLFdBQUQsQ0FBVCxDQUF1QixjQUF2QixFQUhHO0dBYmdCO0FBQUEsQ0F6Q3ZCLENBQUE7O0FBQUEsV0EyRFcsQ0FBQSxTQUFFLENBQUEsS0FBYixHQUFxQixTQUFDLE9BQUQsRUFBVSxRQUFWLEdBQUE7QUFDbkIsRUFBQSxPQUFPLENBQUMsRUFBUixDQUFXLFFBQVgsRUFBcUIsSUFBQyxDQUFBLFlBQVksQ0FBQyxJQUFkLENBQW1CLElBQW5CLENBQXJCLENBQUEsQ0FBQTtTQUNBLFFBQUEsQ0FBUyxJQUFULEVBRm1CO0FBQUEsQ0EzRHJCLENBQUE7O0FBQUEsV0ErRFcsQ0FBQSxTQUFFLENBQUEsSUFBYixHQUFvQixTQUFBLEdBQUEsQ0EvRHBCLENBQUE7O0FBQUEsTUFrRU0sQ0FBQyxPQUFQLEdBQWlCLE9BQUEsR0FBVSxXQWxFM0IsQ0FBQSIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIkdvb2RSZXBvcnRlciA9IHJlcXVpcmUgJ2dvb2QtcmVwb3J0ZXInXG5Ib2VrID0gcmVxdWlyZSAnaG9laydcblNhZmVTdHJpbmdpZnkgPSByZXF1aXJlICdqc29uLXN0cmluZ2lmeS1zYWZlJ1xuXG5pbnRlcm5hbHMgPVxuICBkZWZhdWx0czpcbiAgICBlcnJvcl9sZXZlbDogJ2Vycm9yJ1xuICAgIG9wc19sZXZlbDogJ2luZm8nXG4gICAgcmVxdWVzdF9sZXZlbDogJ2luZm8nXG4gICAgcmVzcG9uc2VfbGV2ZWw6ICdpbmZvJ1xuICAgIG90aGVyX2xldmVsOiAnaW5mbydcblxuY2xhc3MgR29vZFdpbnN0b25cbiAgY29uc3RydWN0b3I6IChldmVudHMsIHdpbnN0b24sIG9wdGlvbnMgPSB7fSkgLT5cbiAgICBIb2VrLmFzc2VydCBAY29uc3RydWN0b3IgPT0gR29vZFdpbnN0b24sICdHb29kV2luc3RvbiBtdXN0IGJlIGNyZWF0ZWQgd2l0aCBuZXcnXG4gICAgSG9lay5hc3NlcnQgd2luc3RvbiwgJ3dpbnN0b24gbG9nZ2VyIG11c3Qgbm90IGJlIG51bGwnXG4gICAgc2V0dGluZ3MgPSBIb2VrLmFwcGx5VG9EZWZhdWx0cyBpbnRlcm5hbHMuZGVmYXVsdHMsIG9wdGlvbnNcbiAgICBAd2luc3RvbiA9IHdpbnN0b25cbiAgICBAZXJyb3JfbGV2ZWwgPSBzZXR0aW5ncy5lcnJvcl9sZXZlbFxuICAgIEBvcHNfbGV2ZWwgPSBzZXR0aW5ncy5vcHNfbGV2ZWxcbiAgICBAcmVxdWVzdF9sZXZlbCA9IHNldHRpbmdzLnJlcXVlc3RfbGV2ZWxcbiAgICBAcmVzcG9uc2VfbGV2ZWwgPSBzZXR0aW5ncy5yZXNwb25zZV9sZXZlbFxuICAgIEBvdGhlcl9sZXZlbCA9IHNldHRpbmdzLm90aGVyX2xldmVsXG4gICAgR29vZFJlcG9ydGVyLmNhbGwgdGhpcywgZXZlbnRzLCBzZXR0aW5nc1xuXG5Ib2VrLmluaGVyaXRzIEdvb2RXaW5zdG9uLCBHb29kUmVwb3J0ZXJcblxuR29vZFdpbnN0b246Ol9sb2dSZXNwb25zZSA9IChldmVudCwgdGFncz1bXSkgLT5cbiAgcXVlcnkgPSBpZiBldmVudC5xdWVyeSB0aGVuIEpTT04uc3RyaW5naWZ5KGV2ZW50LnF1ZXJ5KSBlbHNlICcnXG4gIHJlc3BvbnNlUGF5bG9hZCA9ICcnXG4gIGlmIHR5cGVvZiBldmVudC5yZXNwb25zZVBheWxvYWQgPT0gJ29iamVjdCcgYW5kIGV2ZW50LnJlc3BvbnNlUGF5bG9hZFxuICAgIHJlc3BvbnNlUGF5bG9hZCA9ICdyZXNwb25zZSBwYXlsb2FkOiAnICsgU2FmZVN0cmluZ2lmeSBldmVudC5yZXNwb25zZVBheWxvYWRcbiAgQHdpbnN0b25bQHJlc3BvbnNlX2xldmVsXSBcIlsje3RhZ3N9XSwgXCIgKyBIb2VrLmZvcm1hdCAnJXM6ICVzICVzICVzICVzICglc21zKSAlcycsXG4gICAgZXZlbnQuaW5zdGFuY2UsXG4gICAgZXZlbnQubWV0aG9kLFxuICAgIGV2ZW50LnBhdGgsXG4gICAgcXVlcnksXG4gICAgZXZlbnQuc3RhdHVzQ29kZSxcbiAgICBldmVudC5yZXNwb25zZVRpbWUsXG4gICAgcmVzcG9uc2VQYXlsb2FkXG5cbkdvb2RXaW5zdG9uOjpfcmVwb3J0ID0gKGV2ZW50LCBkYXRhKSAtPlxuICBpZiBldmVudCA9PSAncmVzcG9uc2UnXG4gICAgQF9sb2dSZXNwb25zZSBkYXRhLCBkYXRhLnRhZ3NcbiAgZWxzZSBpZiBldmVudCA9PSAnb3BzJ1xuICAgIEB3aW5zdG9uW0BvcHNfbGV2ZWxdIEhvZWsuZm9ybWF0ICdtZW1vcnk6ICVzTWIsIHVwdGltZSAoc2Vjb25kcyk6ICVzLCBsb2FkOiAlcycsXG4gICAgICBNYXRoLnJvdW5kKGRhdGEucHJvYy5tZW0ucnNzIC8gKDEwMjQgKiAxMDI0KSksXG4gICAgICBkYXRhLnByb2MudXB0aW1lLFxuICAgICAgZGF0YS5vcy5sb2FkXG4gIGVsc2UgaWYgZXZlbnQgPT0gJ2Vycm9yJ1xuICAgIEB3aW5zdG9uW0BlcnJvcl9sZXZlbF0gJ21lc3NhZ2U6ICcgKyBkYXRhLmVycm9yLm1lc3NhZ2UgKyAnIHN0YWNrOiAnICsgZGF0YS5lcnJvci5zdGFja1xuICBlbHNlIGlmIGV2ZW50ID09ICdyZXF1ZXN0JyBvciBldmVudCA9PSAnbG9nJ1xuICAgIEB3aW5zdG9uW0ByZXF1ZXN0X2xldmVsXSAnZGF0YTogJyArIGlmIHR5cGVvZiBkYXRhLmRhdGEgPT0gJ29iamVjdCcgdGhlbiBTYWZlU3RyaW5naWZ5KGRhdGEuZGF0YSkgZWxzZSBkYXRhLmRhdGFcbiAgIyBFdmVudCB0aGF0IGlzIHVua25vd24gdG8gZ29vZC1jb25zb2xlLCB0cnkgYSBkZWZ1YWx0LlxuICBlbHNlIGlmIGRhdGEuZGF0YVxuICAgIEB3aW5zdG9uW0BvdGhlcl9sZXZlbF0gJ2RhdGE6ICcgKyBpZiB0eXBlb2YgZGF0YS5kYXRhID09ICdvYmplY3QnIHRoZW4gU2FmZVN0cmluZ2lmeShkYXRhLmRhdGEpIGVsc2UgZGF0YS5kYXRhXG4gIGVsc2VcbiAgICBAd2luc3RvbltAb3RoZXJfbGV2ZWxdICdkYXRhOiAobm9uZSknXG5cbkdvb2RXaW5zdG9uOjpzdGFydCA9IChlbWl0dGVyLCBjYWxsYmFjaykgLT5cbiAgZW1pdHRlci5vbiAncmVwb3J0JywgQF9oYW5kbGVFdmVudC5iaW5kKHRoaXMpXG4gIGNhbGxiYWNrIG51bGxcblxuR29vZFdpbnN0b246OnN0b3AgPSAtPlxuICByZXR1cm5cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gR29vZFdpbnN0b25cbiJdfQ==