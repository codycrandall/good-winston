var GoodReporter, GoodWinston, Hoek, SafeStringify, exports, internals;

GoodReporter = require('good-reporter');

Hoek = require('hoek');

SafeStringify = require('json-stringify-safe');

internals = {
  defaults: {
    level: 'info'
  }
};

GoodWinston = (function() {
  function GoodWinston(events, winston, options) {
    var settings;
    if (options == null) {
      options = {};
    }
    console.log("events=", events);
    console.log("winston=", winston != null);
    Hoek.assert(this.constructor === GoodWinston, 'GoodWinston must be created with new');
    Hoek.assert(winston, 'winston logger must not be null');
    settings = Hoek.applyToDefaults(internals.defaults, options);
    console.log("settings=", settings);
    this.winston = winston;
    this.level = settings.level;
    GoodReporter.call(this, events, settings);
  }

  return GoodWinston;

})();

Hoek.inherits(GoodWinston, GoodReporter);

GoodWinston.prototype._logResponse = function(event) {
  var query, responsePayload;
  query = event.query ? JSON.stringify(event.query) : '';
  responsePayload = '';
  if (typeof event.responsePayload === 'object' && event.responsePayload) {
    responsePayload = 'response payload: ' + SafeStringify(event.responsePayload);
  }
  return this.winston[this.level](Hoek.format('%s: %s %s %s %s (%sms) %s', event.instance, event.method, event.path, query, event.statusCode, event.responseTime, responsePayload));
};

GoodWinston.prototype._report = function(event, data) {
  if (event === 'response') {
    return this._logResponse(data);
  } else if (event === 'ops') {
    return this.winston[this.level](Hoek.format('memory: %sMb, uptime (seconds): %s, load: %s', Math.round(data.proc.mem.rss / (1024 * 1024)), data.proc.uptime, data.os.load));
  } else if (event === 'error') {
    return this.winston[this.level]('message: ' + data.error.message + ' stack: ' + data.error.stack);
  } else if (eventName === 'request' || eventName === 'log') {
    return this.winston[this.level]('data: ' + (typeof data.data === 'object' ? SafeStringify(data.data) : data.data));
  } else if (data.data) {
    return this.winston[this.level]('data: ' + (typeof data.data === 'object' ? SafeStringify(data.data) : data.data));
  } else {
    return this.winston[this.level]('data: (none)');
  }
};

GoodWinston.prototype.start = function(emitter, callback) {
  emitter.on('report', this._handleEvent.bind(this));
  return callback(null);
};

GoodWinston.prototype.stop = function() {};

module.exports = exports = GoodWinston;

//# sourceMappingURL=data:application/json;base64,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S0FBYixHQUFxQixTQUFDLE9BQUQsRUFBVSxRQUFWLEdBQUE7QUFDbkIsRUFBQSxPQUFPLENBQUMsRUFBUixDQUFXLFFBQVgsRUFBcUIsSUFBQyxDQUFBLFlBQVksQ0FBQyxJQUFkLENBQW1CLElBQW5CLENBQXJCLENBQUEsQ0FBQTtTQUNBLFFBQUEsQ0FBUyxJQUFULEVBRm1CO0FBQUEsQ0F0RHJCLENBQUE7O0FBQUEsV0EwRFcsQ0FBQSxTQUFFLENBQUEsSUFBYixHQUFvQixTQUFBLEdBQUEsQ0ExRHBCLENBQUE7O0FBQUEsTUE2RE0sQ0FBQyxPQUFQLEdBQWlCLE9BQUEsR0FBVSxXQTdEM0IsQ0FBQSIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIkdvb2RSZXBvcnRlciA9IHJlcXVpcmUgJ2dvb2QtcmVwb3J0ZXInXG5Ib2VrID0gcmVxdWlyZSAnaG9laydcblNhZmVTdHJpbmdpZnkgPSByZXF1aXJlICdqc29uLXN0cmluZ2lmeS1zYWZlJ1xuXG5pbnRlcm5hbHMgPVxuICBkZWZhdWx0czpcbiAgICBsZXZlbDogJ2luZm8nXG5cbmNsYXNzIEdvb2RXaW5zdG9uXG4gIGNvbnN0cnVjdG9yOiAoZXZlbnRzLCB3aW5zdG9uLCBvcHRpb25zID0ge30pIC0+XG4gICAgY29uc29sZS5sb2cgXCJldmVudHM9XCIsIGV2ZW50c1xuICAgIGNvbnNvbGUubG9nIFwid2luc3Rvbj1cIiwgd2luc3Rvbj9cbiAgICBIb2VrLmFzc2VydCBAY29uc3RydWN0b3IgPT0gR29vZFdpbnN0b24sICdHb29kV2luc3RvbiBtdXN0IGJlIGNyZWF0ZWQgd2l0aCBuZXcnXG4gICAgSG9lay5hc3NlcnQgd2luc3RvbiwgJ3dpbnN0b24gbG9nZ2VyIG11c3Qgbm90IGJlIG51bGwnXG4gICAgc2V0dGluZ3MgPSBIb2VrLmFwcGx5VG9EZWZhdWx0cyBpbnRlcm5hbHMuZGVmYXVsdHMsIG9wdGlvbnNcbiAgICBjb25zb2xlLmxvZyBcInNldHRpbmdzPVwiLCBzZXR0aW5nc1xuICAgIEB3aW5zdG9uID0gd2luc3RvblxuICAgIEBsZXZlbCA9IHNldHRpbmdzLmxldmVsXG4gICAgR29vZFJlcG9ydGVyLmNhbGwgdGhpcywgZXZlbnRzLCBzZXR0aW5nc1xuXG5Ib2VrLmluaGVyaXRzIEdvb2RXaW5zdG9uLCBHb29kUmVwb3J0ZXJcblxuR29vZFdpbnN0b246Ol9sb2dSZXNwb25zZSA9IChldmVudCkgLT5cbiAgcXVlcnkgPSBpZiBldmVudC5xdWVyeSB0aGVuIEpTT04uc3RyaW5naWZ5KGV2ZW50LnF1ZXJ5KSBlbHNlICcnXG4gIHJlc3BvbnNlUGF5bG9hZCA9ICcnXG4gIGlmIHR5cGVvZiBldmVudC5yZXNwb25zZVBheWxvYWQgPT0gJ29iamVjdCcgYW5kIGV2ZW50LnJlc3BvbnNlUGF5bG9hZFxuICAgIHJlc3BvbnNlUGF5bG9hZCA9ICdyZXNwb25zZSBwYXlsb2FkOiAnICsgU2FmZVN0cmluZ2lmeSBldmVudC5yZXNwb25zZVBheWxvYWRcbiAgQHdpbnN0b25bQGxldmVsXSBIb2VrLmZvcm1hdCAnJXM6ICVzICVzICVzICVzICglc21zKSAlcycsXG4gICAgZXZlbnQuaW5zdGFuY2UsXG4gICAgZXZlbnQubWV0aG9kLFxuICAgIGV2ZW50LnBhdGgsXG4gICAgcXVlcnksXG4gICAgZXZlbnQuc3RhdHVzQ29kZSxcbiAgICBldmVudC5yZXNwb25zZVRpbWUsXG4gICAgcmVzcG9uc2VQYXlsb2FkXG5cbkdvb2RXaW5zdG9uOjpfcmVwb3J0ID0gKGV2ZW50LCBkYXRhKSAtPlxuICBpZiBldmVudCA9PSAncmVzcG9uc2UnXG4gICAgQF9sb2dSZXNwb25zZSBkYXRhXG4gIGVsc2UgaWYgZXZlbnQgPT0gJ29wcydcbiAgICBAd2luc3RvbltAbGV2ZWxdIEhvZWsuZm9ybWF0ICdtZW1vcnk6ICVzTWIsIHVwdGltZSAoc2Vjb25kcyk6ICVzLCBsb2FkOiAlcycsXG4gICAgICBNYXRoLnJvdW5kKGRhdGEucHJvYy5tZW0ucnNzIC8gKDEwMjQgKiAxMDI0KSksXG4gICAgICBkYXRhLnByb2MudXB0aW1lLFxuICAgICAgZGF0YS5vcy5sb2FkXG4gIGVsc2UgaWYgZXZlbnQgPT0gJ2Vycm9yJ1xuICAgIEB3aW5zdG9uW0BsZXZlbF0gJ21lc3NhZ2U6ICcgKyBkYXRhLmVycm9yLm1lc3NhZ2UgKyAnIHN0YWNrOiAnICsgZGF0YS5lcnJvci5zdGFja1xuICBlbHNlIGlmIGV2ZW50TmFtZSA9PSAncmVxdWVzdCcgb3IgZXZlbnROYW1lID09ICdsb2cnXG4gICAgQHdpbnN0b25bQGxldmVsXSAnZGF0YTogJyArIGlmIHR5cGVvZiBkYXRhLmRhdGEgPT0gJ29iamVjdCcgdGhlbiBTYWZlU3RyaW5naWZ5KGRhdGEuZGF0YSkgZWxzZSBkYXRhLmRhdGFcbiAgIyBFdmVudCB0aGF0IGlzIHVua25vd24gdG8gZ29vZC1jb25zb2xlLCB0cnkgYSBkZWZ1YWx0LlxuICBlbHNlIGlmIGRhdGEuZGF0YVxuICAgIEB3aW5zdG9uW0BsZXZlbF0gJ2RhdGE6ICcgKyBpZiB0eXBlb2YgZGF0YS5kYXRhID09ICdvYmplY3QnIHRoZW4gU2FmZVN0cmluZ2lmeShkYXRhLmRhdGEpIGVsc2UgZGF0YS5kYXRhXG4gIGVsc2VcbiAgICBAd2luc3RvbltAbGV2ZWxdICdkYXRhOiAobm9uZSknXG5cbkdvb2RXaW5zdG9uOjpzdGFydCA9IChlbWl0dGVyLCBjYWxsYmFjaykgLT5cbiAgZW1pdHRlci5vbiAncmVwb3J0JywgQF9oYW5kbGVFdmVudC5iaW5kKHRoaXMpXG4gIGNhbGxiYWNrIG51bGxcblxuR29vZFdpbnN0b246OnN0b3AgPSAtPlxuICByZXR1cm5cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gR29vZFdpbnN0b25cbiJdfQ==